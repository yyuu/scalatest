package org.scalatest

import java.util.Date

sealed abstract class Event

/**
 * Event that indicates a suite (or other entity) is about to start running a test.
 *
 * <p>
 * For example, trait <code>Suite</code> uses <code>TestStarting</code> to report
 * that a test method of a <code>Suite</code> is about to be invoked.
 * </p>
 *
 * @param name a localized name identifying the test that is starting, which should include the
 *     suite and test names, suitable for presenting to the user
 * @param suiteName the name of the suite containing the test that is starting
 * @param suiteClassName an optional fully qualifed <code>Suite</code> class name containing the test that is starting
 * @param testName the name of the test that is starting
 * @param fromSpec indicates the event was generated by a specification-style suite, which if true will likely
 *                 mean the event will be supressed (<em>i.e.</em>, not shown) in specification-like output presented to the user
 * @param rerunnable an optional <code>Rerunnable</code> that can be used to rerun the test that is starting (if <code>None</code>
 *                   is passed, the test cannot be rerun)
 * @param payload an optional object that can be used to pass custom information to the reporter about the test starting event
 * @param threadName a name for the <code>Thread</code> about whose activity this event was reported
 * @param timeStamp a <code>Date</code> indicating the time this event was reported
 *
 * @throws NullPointerException if any of the passed values are <code>null</code>
 */
class TestStarting private (
  val name: String,
  val suiteName: String,
  val suiteClassName: Option[String],
  val testName: String,
  val fromSpec: Boolean,
  val rerunnable: Option[Rerunnable],
  val payload: Option[Any],
  val threadName: String,
  val timeStamp: Date
) extends Event {
  if (name == null)
    throw new NullPointerException("name was null")
  if (suiteName == null)
    throw new NullPointerException("suiteName was null")
  if (suiteClassName == null)
    throw new NullPointerException("suiteClassName was null")
  if (testName == null)
    throw new NullPointerException("testName was null")
  if (rerunnable == null)
    throw new NullPointerException("rerunnable was null")
  if (payload == null)
    throw new NullPointerException("payload was null")
  if (threadName == null)
    throw new NullPointerException("threadName was null")
  if (timeStamp == null)
    throw new NullPointerException("timeStamp was null")
}

/**
 * Companion object for the <code>TestStarting</code> event, which contains overloaded factory methods
 * and an extractor method to facilitate pattern matching on <code>TestStarting</code> objects.
 */
object TestStarting {

  /**
   * Constructs a new <code>TestStarting</code> event with the passed parameters.
   *
   * @param name a localized name identifying the test that is starting, which should include the
   *     suite and test names, suitable for presenting to the user
   * @param suiteName the name of the suite containing the test that is starting
   * @param suiteClassName an optional fully qualifed <code>Suite</code> class name containing the test that is starting
   * @param testName the name of the test that is starting
   * @param fromSpec indicates the event was generated by a specification-style suite, which if true will likely
   *                 mean the event will be supressed (<em>i.e.</em>, not shown) in specification-like output presented to the user
   * @param rerunnable an optional <code>Rerunnable</code> that can be used to rerun the test that is starting (if <code>None</code>
   *                   is passed, the test cannot be rerun)
   * @param payload an optional object that can be used to pass custom information to the reporter about the test starting event
   * @param threadName a name for the <code>Thread</code> about whose activity this event was reported
   * @param timeStamp a <code>Date</code> indicating the time this event was reported
   *
   * @throws NullPointerException if any of the passed values are <code>null</code>
   */
  def apply(
      name: String,
      suiteName: String,
      suiteClassName: Option[String],
      testName: String,
      fromSpec: Boolean,
      rerunnable: Option[Rerunnable],
      payload: Option[Any],
      threadName: String,
      timeStamp: Date
  ): TestStarting = {
    new TestStarting(name, suiteName, suiteClassName, testName, fromSpec, rerunnable, payload, threadName, timeStamp)
  }

  /**
   * Constructs a new <code>TestStarting</code> event with the passed parameters, passing the current threads
   * name as <code>threadname</code> and the current time as <code>timeStamp</code>.
   *
   * @param name a localized name identifying the test that is starting, which should include the
   *     suite and test names, suitable for presenting to the user
   * @param suiteName the name of the suite containing the test that is starting
   * @param suiteClassName an optional fully qualifed <code>Suite</code> class name containing the test that is starting
   * @param testName the name of the test that is starting
   * @param fromSpec indicates the event was generated by a specification-style suite, which if true will likely
   *                 mean the event will be supressed (<em>i.e.</em>, not shown) in specification-like output presented to the user
   * @param rerunnable an optional <code>Rerunnable</code> that can be used to rerun the test that is starting (if <code>None</code>
   *                   is passed, the test cannot be rerun)
   * @param payload an optional object that can be used to pass custom information to the reporter about the test starting event
   *
   * @throws NullPointerException if any of the passed values are <code>null</code>
   */
  def apply(
      name: String,
      suiteName: String,
      suiteClassName: Option[String],
      testName: String,
      fromSpec: Boolean,
      rerunnable: Option[Rerunnable],
      payload: Option[Any]
  ): TestStarting = {
    apply(name, suiteName, suiteClassName, testName, fromSpec, rerunnable, payload, Thread.currentThread.getName, new Date)
  }

  /**
   * Constructs a new <code>TestStarting</code> event with the passed parameters, passing <code>None</code> as the
   * <code>payload</code>, the current threads name as <code>threadname</code>, and the current time as <code>timeStamp</code>.
   *
   * @param name a localized name identifying the test that is starting, which should include the
   *     suite and test names, suitable for presenting to the user
   * @param suiteName the name of the suite containing the test that is starting
   * @param suiteClassName an optional fully qualifed <code>Suite</code> class name containing the test that is starting
   * @param testName the name of the test that is starting
   * @param fromSpec indicates the event was generated by a specification-style suite, which if true will likely
   *                 mean the event will be supressed (<em>i.e.</em>, not shown) in specification-like output presented to the user
   * @param rerunnable an optional <code>Rerunnable</code> that can be used to rerun the test that is starting (if <code>None</code>
   *                   is passed, the test cannot be rerun)
   *
   * @throws NullPointerException if any of the passed values are <code>null</code>
   */
  def apply(
    name: String,
    suiteName: String,
    suiteClassName: Option[String],
    testName: String,
    fromSpec: Boolean,
    rerunnable: Option[Rerunnable]
  ): TestStarting = {
    apply(name, suiteName, suiteClassName, testName, fromSpec, rerunnable, None, Thread.currentThread.getName, new Date)
  }

  /**
   * Constructs a new <code>TestStarting</code> event with the passed parameters, passing <code>None</code> as the
   * <code>rerunnable</code>, <code>None</code> as the <code>payload</code>, the current threads name as <code>threadname</code>,
   * and the current time as <code>timeStamp</code>.
   *
   * @param name a localized name identifying the test that is starting, which should include the
   *     suite and test names, suitable for presenting to the user
   * @param suiteName the name of the suite containing the test that is starting
   * @param suiteClassName an optional fully qualifed <code>Suite</code> class name containing the test that is starting
   * @param testName the name of the test that is starting
   * @param fromSpec indicates the event was generated by a specification-style suite, which if true will likely
   *                 mean the event will be supressed (<em>i.e.</em>, not shown) in specification-like output presented to the user
   *
   * @throws NullPointerException if any of the passed values are <code>null</code>
   */
  def apply(
    name: String,
    suiteName: String,
    suiteClassName: Option[String],
    testName: String,
    fromSpec: Boolean
  ): TestStarting = {
    apply(name, suiteName, suiteClassName, testName, fromSpec, None, None, Thread.currentThread.getName, new Date)
  }

  /**
   * Constructs a new <code>TestStarting</code> event with the passed parameters, passing <code>false</code> for
   * <code>fromSpec</code>, <code>None</code> as the <code>rerunnable</code>, <code>None</code> as the <code>payload</code>,
   * the current threads name as <code>threadname</code>, and the current time as <code>timeStamp</code>.
   *
   * @param name a localized name identifying the test that is starting, which should include the
   *     suite and test names, suitable for presenting to the user
   * @param suiteName the name of the suite containing the test that is starting
   * @param suiteClassName an optional fully qualifed <code>Suite</code> class name containing the test that is starting
   * @param testName the name of the test that is starting
   *
   * @throws NullPointerException if any of the passed values are <code>null</code>
   */
  def apply(
    name: String,
    suiteName: String,
    suiteClassName: Option[String],
    testName: String
  ): TestStarting = {
    apply(name, suiteName, suiteClassName, testName, false, None, None, Thread.currentThread.getName, new Date)
  }

  /**
   * An extraction method that facilitates pattern matching on <code>TestStarting</code> events.
   *
   * @param event the <code>TestStarting</code> event from which to extract
   *
   * @throws NullPointerException if the passed <code>event<code> is <code>null</code>
   */
  def unapply(event: TestStarting): Option[(String, String, Option[String], String, Boolean, Option[Rerunnable], Option[Any], String, Date)] =
    Some(event.name, event.suiteName, event.suiteClassName, event.testName, event.fromSpec, event.rerunnable, event.payload, event.threadName, event.timeStamp)
}