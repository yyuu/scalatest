package org.scalatest

import java.util.Date

sealed abstract class Event

/**
 * Event that indicates a suite (or other entity) is about to start a test.
 *
 * <p>
 * For example, trait <code>Suite</code> uses <code>TestStarting</code> to report
 * that a test method of a <code>Suite</code> is about to be invoked.
 * </p>
 *
 * @param name a localized name identifying the test that is starting, which should include the
 *     suite and test names, suitable for presenting to the user
 * @param suiteName the name of the suite containing the test that is starting
 * @param suiteClassName an optional fully qualifed <code>Suite</code> class name containing the test that is starting
 * @param testName the name of the test that is starting
 * @param fromSpec indicates the event was generated by a specification-style suite, which if true will likely
 *                 mean the event will be supressed (<em>i.e.</em>, not shown) in specification-like output presented to the user
 * @param rerunnable an optional <code>Rerunnable</code> that can be used to rerun the test that is starting (if <code>None</code>
 *                   is passed, the test cannot be rerun)
 * @param payload an optional object that can be used to pass custom information to the reporter about the test starting event
 * @param threadName a name for the <code>Thread</code> about whose activity this event was reported
 * @param timeStamp a <code>Date</code> indicating the time this event was reported
 *
 * @throws NullPointerException if any of the passed values are <code>null</code>
 */
case class TestStarting (
  name: String,
  suiteName: String,
  suiteClassName: Option[String],
  testName: String,
  fromSpec: Boolean, // True if from Spec, means won't show up in specification-style output
  rerunnable: Option[Rerunnable],
  payload: Option[Any],
  threadName: String,
  timeStamp: Date
) extends Event {
  def this(
      name: String,
      suiteName: String,
      suiteClassName: Option[String],
      testName: String,
      fromSpec: Boolean,
      rerunnable: Option[Rerunnable],
      payload: Option[Any]
  ) {
    this(name, suiteName, suiteClassName, testName, fromSpec, rerunnable, payload, Thread.currentThread.getName, new Date)
  }

  def this(
    name: String,
    suiteName: String,
    suiteClassName: Option[String],
    testName: String,
    fromSpec: Boolean,
    rerunnable: Option[Rerunnable]
  ) {
    this(name, suiteName, suiteClassName, testName, fromSpec, rerunnable, None, Thread.currentThread.getName, new Date)
  }

  def this(
    name: String,
    suiteName: String,
    suiteClassName: Option[String],
    testName: String,
    fromSpec: Boolean
  ) {
    this(name, suiteName, suiteClassName, testName, fromSpec, None, None, Thread.currentThread.getName, new Date)
   }

  def this(
    name: String,
    suiteName: String,
    suiteClassName: Option[String],
    testName: String
  ) {
    this(name, suiteName, suiteClassName, testName, false, None, None, Thread.currentThread.getName, new Date)
  }
}